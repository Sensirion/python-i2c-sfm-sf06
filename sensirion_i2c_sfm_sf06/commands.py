#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2021 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:    sensirion-driver-generator 0.1.0
# Product:      SFM_SF06
# Version:      1.0
#

from sensirion_i2c_adapter.transfer import Transfer, TxData, RxData


class StartO2ContinuousMeasurement(Transfer):

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(0x3603, '>H', device_busy_delay=12, slave_address=None)


class StartAirContinuousMeasurement(Transfer):

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(0x3608, '>H')


class StartN2OContinuousMeasurement(Transfer):

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(0x3615, '>H', device_busy_delay=12, slave_address=None)


class StartCO2ContinuousMeasurement(Transfer):

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(0x361e, '>H', device_busy_delay=12, slave_address=None)


class StartAirO2ContinuousMeasurement(Transfer):

    def __init__(self, volume_fraction):
        self._volume_fraction = volume_fraction

    def pack(self):
        return self.tx_data.pack([self._volume_fraction])

    tx = TxData(0x3632, '>HH', device_busy_delay=12, slave_address=None)


class StartNO2O2ContinuousMeasurement(Transfer):

    def __init__(self, volume_fraction):
        self._volume_fraction = volume_fraction

    def pack(self):
        return self.tx_data.pack([self._volume_fraction])

    tx = TxData(0x3639, '>HH', device_busy_delay=12, slave_address=None)


class StartC0202ContinuousMeasurement(Transfer):

    def __init__(self, volume_fraction):
        self._volume_fraction = volume_fraction

    def pack(self):
        return self.tx_data.pack([self._volume_fraction])

    tx = TxData(0x3646, '>HH', device_busy_delay=12, slave_address=None)


class ReadMeasurementData(Transfer):

    def pack(self):
        return None

    rx = RxData('>hhH')


class UpdateConcentrationSet(Transfer):

    def __init__(self, volume_fraction):
        self._volume_fraction = volume_fraction

    def pack(self):
        return self.tx_data.pack([self._volume_fraction])

    tx = TxData(0xe17d, '>HH')


class UpdateConcentrationActivate(Transfer):

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(0xe000, '>H')


class StopContinuousMeasurement(Transfer):

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(0x3ff9, '>H')


class ConfigureAveraging(Transfer):

    def __init__(self, average_window):
        self._average_window = average_window

    def pack(self):
        return self.tx_data.pack([self._average_window])

    tx = TxData(0x366a, '>HH')


class ReadScaleOffsetFlow(Transfer):

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(0x3661, '>H')
    rx = RxData('>hhH')


class EnterSleep(Transfer):

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(0x3677, '>H', device_busy_delay=0, slave_address=None)


class ExitSleep(Transfer):

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(0x0, '>B')


class ReadProductIdentifier(Transfer):

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(0xe102, '>H')
    rx = RxData('>IQ')
