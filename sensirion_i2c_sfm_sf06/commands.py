#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2021 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:    sensirion-driver-generator 0.1.0
# Product:      sfm_sf06
# Version:      1.0
#

from sensirion_i2c_adapter.transfer import Transfer, TxData, RxData


class StartO2ContinuousMeasurement(Transfer):
    CMD_ID = 0x3603

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>H', device_busy_delay=12, slave_address=None,
                ignore_ack=False)


class StartAirContinuousMeasurement(Transfer):
    CMD_ID = 0x3608

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>H')


class StartN2OContinuousMeasurement(Transfer):
    CMD_ID = 0x3615

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>H', device_busy_delay=12, slave_address=None,
                ignore_ack=False)


class StartCO2ContinuousMeasurement(Transfer):
    CMD_ID = 0x361e

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>H', device_busy_delay=12, slave_address=None,
                ignore_ack=False)


class StartAirO2ContinuousMeasurement(Transfer):
    CMD_ID = 0x3632

    def __init__(self, volume_fraction):
        self._volume_fraction = volume_fraction

    def pack(self):
        return self.tx_data.pack([self._volume_fraction])

    tx = TxData(CMD_ID, '>HH', device_busy_delay=12, slave_address=None,
                ignore_ack=False)


class StartN2OO2ContinuousMeasurement(Transfer):
    CMD_ID = 0x3639

    def __init__(self, volume_fraction):
        self._volume_fraction = volume_fraction

    def pack(self):
        return self.tx_data.pack([self._volume_fraction])

    tx = TxData(CMD_ID, '>HH', device_busy_delay=12, slave_address=None,
                ignore_ack=False)


class StartCO2O2ContinuousMeasurement(Transfer):
    CMD_ID = 0x3646

    def __init__(self, volume_fraction):
        self._volume_fraction = volume_fraction

    def pack(self):
        return self.tx_data.pack([self._volume_fraction])

    tx = TxData(CMD_ID, '>HH', device_busy_delay=12, slave_address=None,
                ignore_ack=False)


class ReadMeasurementData(Transfer):

    def pack(self):
        return None

    rx = RxData('>hhH')


class UpdateConcentrationSet(Transfer):
    CMD_ID = 0xe17d

    def __init__(self, volume_fraction):
        self._volume_fraction = volume_fraction

    def pack(self):
        return self.tx_data.pack([self._volume_fraction])

    tx = TxData(CMD_ID, '>HH')


class UpdateConcentrationActivate(Transfer):
    CMD_ID = 0xe000

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>H')


class StopContinuousMeasurement(Transfer):
    CMD_ID = 0x3ff9

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>H')


class ConfigureAveraging(Transfer):
    CMD_ID = 0x366a

    def __init__(self, average_window):
        self._average_window = average_window

    def pack(self):
        return self.tx_data.pack([self._average_window])

    tx = TxData(CMD_ID, '>HH')


class ReadScaleOffsetUnit(Transfer):
    CMD_ID = 0x3661

    def __init__(self, command_code):
        self._command_code = command_code

    def pack(self):
        return self.tx_data.pack([self._command_code])

    tx = TxData(CMD_ID, '>HH')
    rx = RxData('>hhH')


class EnterSleep(Transfer):
    CMD_ID = 0x3677

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>H', device_busy_delay=0, slave_address=None,
                ignore_ack=True)


class ExitSleep(Transfer):
    CMD_ID = 0x0

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>B', device_busy_delay=0, slave_address=None,
                ignore_ack=True)


class ReadProductIdentifier(Transfer):
    CMD_ID = 0xe102

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>H')
    rx = RxData('>I8s')
